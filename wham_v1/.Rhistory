shiny::runApp()
remove.packages("dplyr", lib="~/Library/R/3.4/library")
runApp()
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("dplyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("dplyr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
shiny::runApp()
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
sessionInfo()
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
datatable(iris) %>% formatStyle(
'Sepal.Width',
backgroundColor = styleInterval(c(3.4, 3.8), c('red', 'white', 'green')),
fontWeight = 'bold'
)
datatable(iris)
datatable(iris) %>% formatStyle(color="white", background="red")
datatable(iris) %>% formatStyle(T, color="white", background="red")
datatable(iris) %>% formatStyle(T, color="white", background="red", backgroundColor="grey85")
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
runApp('~/Documents/WHAM_BUNDLE_5.26.20')
runApp('~/Documents/GitHub/WHAM_source/wham_v1')
sessionInfo()
shiny::runApp()
runApp()
runApp()
library(BiocManager)
options(repos = BiocManager::repositories())
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp()
shiny::runApp()
colorer()
color_select()
cols_keep2 <- c("#f70c1c", "#6d89e8", "#91dd68", "#482e91", "#fc9207",
"#fcdb23", "#e87ac3", "#5beabd", "#01871e", "#a0080f")
groupings = c("A", "B", "C")
grouping_nums = c(5,10,20)
cols_cols = cols_keep2[1:3]
bin <- c()
for (i in 1:length(groupings)){
use <- rep(groupings[i], grouping_nums[i])
bin <- c(bin, use)
}
bin
names <- bin
uniq_names <- unique(names)
meta <- data.frame(names)
meta
for (i in 1:length(uniq_names)){
new_bin <- as.integer(meta$names == uniq_names[i])
meta <- cbind(meta, new_bin)
}
series_mat <- meta[,-1]
View(series_mat)
colnames(series_mat) <- uniq_names
#series_mat <- t(series_mat)
series_mat[series_mat==0] <- NA
g1 = t(as.matrix(series_mat[,1]))
g1col <- data.frame(x = c(0,1), y = c(cols_cols[1], cols_cols[1]))
colnames(g1col) <- NULL
g1col
ax <- list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
tickcolor = 'white',
showgrid = FALSE
)
colorer <- plot_ly(
type = "heatmap"
) %>% add_trace(
x=1:length(bin),
z = g1,
colorscale = g1col, showscale = F,
hoverinfo = 'all'
) %>%
layout(yaxis = ax, xaxis = ax)
for (i in 2:length(uniq_names)){
g = t(as.matrix(series_mat[,i]))
gcol <- data.frame(x = c(0,1), y = c(cols_cols[i], cols_cols[i]))
colnames(gcol) <- NULL
colorer <- colorer %>% add_trace(
x=1:length(bin),
z = g,
colorscale = gcol, showscale = F,
hoverinfo = 'all'
)
}
colorer
subplot(colorer, colorer)
subplot(colorer, colorer, shareX=T)
p = colorer
subplot(colorer(),
p, nrows = 2, margin = c(0,0,-0.01,0),
heights = c(0.1, 0.9), shareX = T)
subplot(colorer,
p, nrows = 2, margin = c(0,0,-0.01,0),
heights = c(0.1, 0.9), shareX = T)
runApp()
plotlyOutput(colorer)
dev.off()
plotlyOutput(colorer)
shiny::runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("orca", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp()
install.packages("processx", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
shiny::runApp()
runApp()
library(plotly)
saveWidget()
as.widget()
runApp()
library(BiocManager)
options(repos = BiocManager::repositories())
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(BiocManager)
options(repos = BiocManager::repositories())
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
library(BiocParallel)
remove.packages("BiocParallel", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
BiocManager::install("BiocParallel")
library(BiocParallel)
sessionInfo()
shiny::runApp()
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
library(BiocParallel)
library(ALDEx2)
remove.packages("BiocParallel", lib="~/Library/R/3.4/library")
library(ALDEx2)
shiny::runApp()
library(ALDEx2)
BiocInstaller::biocLite("BiocParallel")
library("BiocParallel", lib.loc="~/Library/R/3.4/library")
library(ALDEx2)
options(repos = BiocInstaller::biocinstallRepos())
sessionInfo()
shiny::runApp()
install.packages("~/Downloads/BiocParallel_1.10.1.tar", repos=NULL, type='source')
runApp()
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.8/bioc"))
2
getOption("repos")
options(repos = BiocInstaller::biocinstallRepos())
remove.packages("BiocParallel")
install.packages("~/Downloads/BiocParallel_1.16.6.tar")
install.packages("~/Downloads/BiocParallel_1.16.6.tar", repos=NULL, type='source')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
remove.packages("BiocParallel")
getRepos()
getOption("repos")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
library(ALDEx2)
library(BiocParallel)
install.packages(c("cluster", "gplots", "KernSmooth", "Matrix", "mnormt", "nlme"))
install.packages(c("cluster", "gplots", "KernSmooth", "Matrix", "mnormt", "nlme"))
rsconnect::appDependencies()
devtools::session_info()
BiocManager::install("BiocParallel")
shiny::runApp()
